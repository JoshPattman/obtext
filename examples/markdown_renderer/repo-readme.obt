@doc
{
	@h1{ Objective Text - A Dead Simple Markup Language }
	@p{ 
		Objective Text is a minimalist markup language designed for blog writing, designed by blending @icode{html} and @icode{latex}. Its key feature is its simplicity, with a grammar that consists of only three elements:
	}
	@ul
		{Objects: Denoted by @icode{\@object_name}}
		{Arguments: Enclosed in @icode{\{argument text and objects\}}}
		{Text: Can be any string of characters}
	@p {
		Here's an example of how you might use Objective Text to structure a blog page:
	}
	@code{obt}{res/obt-example.obt}

	@p {
		For a more detailed example, take a look at @icode{examples/markdown_renderer} example. It shows how you can convert from objective text to markdown, and was actually used to generate this README!
	}


	@h2 {Understanding Objects}
	@p {
		Objects are the fundamental building blocks of Objective Text. They're identified by an \@ symbol followed by the object name (e.g. \@header). Each object is followed by one or more argument blocks, enclosed in \{\}. Whitespace around these blocks is flexible for readability, and leading and trailing whitespace within argument blocks is automatically removed.
	}
	@p {
		One of the unique features of Objective Text is its flexibility. During the syntax parsing step, the parser will accept any object with any @icode{\@<object type>}, and any number of arguments. However, during the step of converting they syntax tree to a semantic tree, the parser will check if each object is valid given the rules that you give it. Obtext comes with a set of default semantic rules for mark up purposes, @icode{DefaultMarkupSemantics}, but you can easily either modify them, or create your own from scratch. This means that it is trivial to create custom objects, such as an image gallery or a table of contents.
	}

	@h2 { Usage }
	@code {go} {./res/go-example.go}
}